# -*- coding: utf-8 -*-
"""PRODIGY_ML(Task-1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qVl0nF9a1gTnvbL_AFKz3CfFHyCibgk5

# Importing libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

"""# Load the Dataset"""

data = pd.read_csv('/content/housing_price_dataset.csv')

print(data.head())

print(data.info())

print(data.describe())

print(data.shape)

"""# Loading and Preprocessing Data"""

from sklearn.preprocessing import MinMaxScaler

data = data.dropna()  # Drop rows with missing values
X = data[['SquareFeet', 'YearBuilt', 'Bedrooms']]
y = data['Price']

# Scale numerical features
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

"""# Data visualization"""

plt.figure(figsize=(10, 6))
sns.histplot(data['Price'], kde=True)
plt.title('House Price Distribution')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='SquareFeet', y='Price', data=data)
plt.title('Price vs. Square Feet')
plt.show()

plt.figure(figsize=(10, 6))
sns.distplot(data['Price'], kde=True, bins=20)
plt.xlabel('Price')
plt.ylabel('Density')
plt.title('Distribution of House Prices')
plt.show()

plt.figure(figsize=(10, 8))
correlation_matrix = data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

plt.figure(figsize=(12, 8))
sns.pairplot(data[['SquareFeet', 'Bedrooms', 'Bathrooms', 'Price']], diag_kind='kde')
plt.suptitle('Pairplot of Features and House Prices')
plt.show()

X = data[['SquareFeet', 'Bedrooms', 'YearBuilt']] # replace with your actual feature columns
y = data['Price']
model = LinearRegression()
model.fit(X, y)

y_pred = model.predict(X)
residuals = y - y_pred

plt.figure(figsize=(10, 6))
plt.hist(y, bins=20, alpha=0.5, label='Actual Prices')
plt.hist(y_pred, bins=20, alpha=0.5, label='Predicted Prices')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.legend()
plt.title('Distribution of House Prices and Predicted Prices')
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(residuals, bins=20, alpha=0.5, label='Residuals')
plt.xlabel('Residual')
plt.ylabel('Frequency')
plt.title('Residual Histogram')
plt.axvline(x=0, color='r', linestyle='dashed', linewidth=1)
plt.legend()
plt.show()

"""# Cleaning and Handling outliers"""

data = data[(data['Price'] >= 100000) & (data['Price'] <= 1000000)]

data.drop_duplicates(inplace=True)

data['SquareFeet'] = (data['SquareFeet'] - data['SquareFeet'].min()) / (data['SquareFeet'].max() - data['SquareFeet'].min())

"""# Visualizing the distribution of house prices"""

plt.hist(data['Price'], bins=20)
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

plt.scatter(data['Bedrooms'], data['Price'])
plt.xlabel('Bedrooms')
plt.ylabel('Price')
plt.show()

"""# Feature Selection & Data Split"""

from sklearn.feature_selection import SelectKBest, f_regression

from sklearn.model_selection import train_test_split

# Assume that `X` and `y` are already defined
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


selector = SelectKBest(score_func=f_regression, k='all')
X_train_selected = selector.fit_transform(X_train, y_train)
X_test_selected = selector.transform(X_test)

"""# Model Selection and Accuracy:"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

"""Model training

"""

model = RandomForestRegressor()
model.fit(X_train_selected, y_train)

"""Model prediction"""

y_pred = model.predict(X_test_selected)

"""Model evaluation"""

mse = mean_squared_error(y_test, y_pred)
accuracy = 1 - (mse / np.var(y_test))
print("Model Accuracy:", accuracy)

from sklearn.metrics import r2_score

"""R-squared score"""

r2 = r2_score(y_test, y_pred)
print("R-squared:", r2)

